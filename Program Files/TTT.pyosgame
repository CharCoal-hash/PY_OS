import random

# Define the Tic-Tac-Toe board
board = [' ' for _ in range(9)]

# Define AI and player
AI = 'O'
PLAYER = 'X'

# Winning combinations (index positions)
winning_combinations = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
    [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
    [0, 4, 8], [2, 4, 6]              # Diagonals
]

# Check if a player has won
def check_win(player):
    for combination in winning_combinations:
        if board[combination[0]] == player and board[combination[1]] == player and board[combination[2]] == player:
            return True
    return False

# Check if the board is full (draw)
def is_full():
    return ' ' not in board

# Minimax algorithm to determine the best move
def minimax(board, depth, is_maximizing):
    if check_win(AI):
        return 1
    elif check_win(PLAYER):
        return -1
    elif is_full():
        return 0
    
    if is_maximizing:
        best_score = float('-inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = AI
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = PLAYER
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

# AI move: Find the best possible move for the AI using the minimax algorithm
def ai_move():
    best_score = float('-inf')
    best_move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = AI
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

# Print the board
def print_board():
    print(f'{board[0]} | {board[1]} | {board[2]}')
    print('--+---+--')
    print(f'{board[3]} | {board[4]} | {board[5]}')
    print('--+---+--')
    print(f'{board[6]} | {board[7]} | {board[8]}')

# Main function to play the game
def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print("You are 'X' and the AI is 'O'.")
    print_board()

    while True:
        # Player's move
        while True:
            try:
                player_move = int(input("Enter your move (1-9): ")) - 1
                if board[player_move] == ' ':
                    board[player_move] = PLAYER
                    break
                else:
                    print("Invalid move! Cell already occupied.")
            except (ValueError, IndexError):
                print("Invalid input! Enter a number between 1 and 9.")

        print_board()

        if check_win(PLAYER):
            print("Congratulations! You win!")
            break
        elif is_full():
            print("It's a draw!")
            break

        # AI's move
        print("AI is making its move...")
        move = ai_move()
        board[move] = AI
        print_board()

        if check_win(AI):
            print("AI wins! Better luck next time.")
            break
        elif is_full():
            print("It's a draw!")
            break

# Run the game
if __name__ == "__main__":
    play_game()
