import random

# Define the Tic-Tac-Toe board
board = [' ' for _ in range(9)]

# Define AI and player
AI = 'O'
PLAYER = 'X'

# Winning combinations (index positions)
winning_combinations = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
    [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
    [0, 4, 8], [2, 4, 6]              # Diagonals
]

# Check if a player has won
def check_win(player):
    for combination in winning_combinations:
        if board[combination[0]] == player and board[combination[1]] == player and board[combination[2]] == player:
            return True
    return False

# Check if the board is full (draw)
def is_full():
    return ' ' not in board

# Minimax algorithm to determine the best move (AI)
def minimax(board, depth, is_maximizing):
    if check_win(AI):
        return 1
    elif check_win(PLAYER):
        return -1
    elif is_full():
        return 0
    
    if is_maximizing:
        best_score = float('-inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = AI
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = PLAYER
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

# AI move: Find the best possible move for the AI using the minimax algorithm
def ai_move():
    best_score = float('-inf')
    best_move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = AI
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

# Print the board
def print_board():
    print(f'{board[0]} | {board[1]} | {board[2]}')
    print('--+---+--')
    print(f'{board[3]} | {board[4]} | {board[5]}')
    print('--+---+--')
    print(f'{board[6]} | {board[7]} | {board[8]}')

# Reset the board
def reset_board():
    global board
    board = [' ' for _ in range(9)]

# Main function to play a single game
def play_game(two_player_mode=False):
    print("Welcome to Tic-Tac-Toe!")
    print("You are 'X' and the AI is 'O'." if not two_player_mode else "Player 1 is 'X' and Player 2 is 'O'.")
    print_board()

    is_x_turn = True  # Player X starts first

    while True:
        if two_player_mode:  # Two-player mode
            while True:
                try:
                    player_move = int(input(f"Player {'X' if is_x_turn else 'O'}, enter your move (1-9): ")) - 1
                    if board[player_move] == ' ':
                        board[player_move] = 'X' if is_x_turn else 'O'
                        break
                    else:
                        print("Invalid move! Cell already occupied.")
                except (ValueError, IndexError):
                    print("Invalid input! Enter a number between 1 and 9.")
        else:  # AI vs player mode
            if is_x_turn:  # Player's turn (X)
                while True:
                    try:
                        player_move = int(input("Enter your move (1-9): ")) - 1
                        if board[player_move] == ' ':
                            board[player_move] = 'X'
                            break
                        else:
                            print("Invalid move! Cell already occupied.")
                    except (ValueError, IndexError):
                        print("Invalid input! Enter a number between 1 and 9.")
            else:  # AI's turn (O)
                print("AI is making its move...")
                move = ai_move()
                board[move] = AI

        print_board()

        if check_win('X' if is_x_turn else 'O'):
            print(f"Player {'X' if is_x_turn else 'O'} wins!")
            break
        elif is_full():
            print("It's a draw!")
            break

        is_x_turn = not is_x_turn  # Switch turns

# Tournament mode
def tournament_mode(num_rounds=3):
    player_x_wins = 0
    player_o_wins = 0
    draws = 0

    for round_num in range(1, num_rounds + 1):
        print(f"\nRound {round_num}")
        reset_board()
        play_game(two_player_mode=False)  # AI vs Player
        if check_win('X'):
            player_x_wins += 1
        elif check_win('O'):
            player_o_wins += 1
        else:
            draws += 1
        print(f"Score: Player X {player_x_wins} - {player_o_wins} Player O | Draws: {draws}")
    
    print(f"\nTournament Over! Final Score: Player X {player_x_wins} - {player_o_wins} Player O | Draws: {draws}")

# Main menu to choose between modes
def main():
    while True:
        print("\nTic-Tac-Toe Game Modes")
        print("1. Single Game (AI vs Player)")
        print("2. Two-Player Mode")
        print("3. Tournament Mode")
        print("4. Exit")

        choice = input("Enter your choice (1-4): ")

        if choice == '1':
            play_game(two_player_mode=False)
        elif choice == '2':
            play_game(two_player_mode=True)
        elif choice == '3':
            num_rounds = int(input("Enter number of rounds for the tournament: "))
            tournament_mode(num_rounds)
        elif choice == '4':
            print("Thanks for playing!")
            break
        else:
            print("Invalid choice. Please select between 1-4.")

if __name__ == "__main__":
    main()
