import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QGridLayout, QLabel, QVBoxLayout
from PyQt5.QtCore import Qt
import random


class TicTacToe(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Tic-Tac-Toe')
        self.setGeometry(100, 100, 300, 350)

        # Initialize the game board
        self.board = [""] * 9  # 9 cells, each will hold either "X", "O", or ""

        # Create grid layout for buttons
        self.grid = QGridLayout()
        self.buttons = []

        # Create the Tic-Tac-Toe board buttons
        for i in range(9):
            button = QPushButton("")
            button.setFixedSize(80, 80)
            button.setFont(button.font().setPointSize(24))  # Large font for X or O
            button.clicked.connect(lambda _, b=i: self.make_move(b))
            self.buttons.append(button)
            self.grid.addWidget(button, i // 3, i % 3)

        # Create label for status
        self.status_label = QLabel("Player X's turn")
        self.status_label.setAlignment(Qt.AlignCenter)

        # Set the layout for the window
        layout = QVBoxLayout()
        layout.addWidget(self.status_label)
        layout.addLayout(self.grid)
        self.setLayout(layout)

        # Variable to track whose turn it is (True for X, False for O)
        self.is_x_turn = True

    def make_move(self, index):
        """Make a move for the player"""
        if self.board[index] == "" and not self.check_winner():
            self.board[index] = "X" if self.is_x_turn else "O"
            self.buttons[index].setText(self.board[index])

            if self.check_winner():
                winner = "X" if self.is_x_turn else "O"
                self.status_label.setText(f"Player {winner} wins!")
                return

            self.is_x_turn = not self.is_x_turn
            self.status_label.setText(f"Player {'X' if self.is_x_turn else 'O'}'s turn")

            if not self.is_x_turn:  # If it's O's turn, AI plays
                self.ai_move()

    def ai_move(self):
        """Simple AI that picks a random empty spot"""
        empty_indices = [i for i, x in enumerate(self.board) if x == ""]
        if empty_indices:
            ai_move = random.choice(empty_indices)
            self.make_move(ai_move)

    def check_winner(self):
        """Check if there's a winner"""
        # Winning combinations (indices of the board)
        winning_combinations = [
            [0, 1, 2],  # Top row
            [3, 4, 5],  # Middle row
            [6, 7, 8],  # Bottom row
            [0, 3, 6],  # Left column
            [1, 4, 7],  # Middle column
            [2, 5, 8],  # Right column
            [0, 4, 8],  # Diagonal from top-left to bottom-right
            [2, 4, 6],  # Diagonal from top-right to bottom-left
        ]

        for combination in winning_combinations:
            if self.board[combination[0]] == self.board[combination[1]] == self.board[combination[2]] != "":
                return True
        return False


def main():
    app = QApplication(sys.argv)
    game = TicTacToe()
    game.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
