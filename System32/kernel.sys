import sys
import os
import subprocess

# Ensure the log directory exists
log_dir = r"Z:\PY_OS\Temp\logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# Function to log output and errors
def log_output(file_path, message):
    with open(file_path, "a") as log_file:
        log_file.write(message + "\n")

# Function to execute a command and log the results
def execute_command(command):
    try:
        # Attempt to execute the command
        result = subprocess.run([sys.executable, command], capture_output=True, text=True, check=True)
        log_output(os.path.join(log_dir, 'test.log'), f"Running: {command}\n[OK] {command} executed successfully.\nOutput: {result.stdout}")
        return result.stdout
    except subprocess.CalledProcessError as e:
        # Log the error if the command fails
        log_output(os.path.join(log_dir, 'error.log'), f"Running: {command}\n[FAILED] Error executing {command}: {e.stderr}")
        return f"Error: {e.stderr}"

# Function to perform tests on pyoscmd commands before running the main loop
def test_commands():
    commands_to_test = [
        'list_files.pyoscmd',
        'cd.pyoscmd',
        'mkdir.pyoscmd',
        'del.pyoscmd',
        'create_file.pyoscmd',
        'list_dirs.pyoscmd',
        'copy.pyoscmd',
        'move.pyoscmd',
        'sysinfo.pyoscmd',
        'text_editor.pyoscmd',
        'browser.pyoscmd',
        'file_manager.pyoscmd',
        'system_monitor.pyoscmd',
        'calculator.pyoscmd',
    ]
    
    for command in commands_to_test:
        print(f"Testing {command}...")
        output = execute_command(command)
        print(output)

# Main kernel loop
def main():
    # Initial greeting
    print("PY_OS Kernel Initializing...")
    
    # Perform testing
    test_commands()

    # Main loop for taking and executing .pyoscmd commands
    while True:
        # Ask for a command
        command = input("Enter command (.pyoscmd): ").strip()
        
        # Break the loop if the user wants to exit
        if command.lower() == "exit":
            print("Exiting PY_OS Kernel.")
            break
        
        # Ensure the command ends with .pyoscmd
        if not command.endswith(".pyoscmd"):
            print("Invalid command. Please enter a valid .pyoscmd command.")
            continue
        
        # Log and execute the command
        output = execute_command(command)
        print(output)

# Running the main kernel
if __name__ == "__main__":
    main()
