import subprocess
import sys
import os
import time

# Function to run the commands
def run_command(command):
    try:
        if command.endswith('.pyoscmd'):
            print(f"Running: {command}")
            # Execute the .pyoscmd file using the Python interpreter
            result = subprocess.run([sys.executable, command], check=True, capture_output=True, text=True)
            print(f"[OK] {command} executed successfully.")
            print(f"Output: {result.stdout}")
        else:
            print(f"[FAILED] {command} is not a valid .pyoscmd file.")
    except subprocess.CalledProcessError as e:
        print(f"[FAILED] Error executing {command}: {e}")
        print(f"Error Output: {e.stderr}")

# Function to run tests for all commands and applications
def test_commands_and_apps():
    print("Testing PY_OS components...\n")
    
    commands = [
        'list_files.pyoscmd',
        'cd.pyoscmd',
        'mkdir.pyoscmd',
        'del.pyoscmd',
        'create_file.pyoscmd',
        'list_dirs.pyoscmd',
        'copy.pyoscmd',
        'move.pyoscmd',
        'sysinfo.pyoscmd',
        'text_editor.pyoscmd',
        'browser.pyoscmd',
        'file_manager.pyoscmd',
        'system_monitor.pyoscmd',
        'calculator.pyoscmd'
    ]

    for command in commands:
        print(f"Testing {command}...")
        run_command(command)
        time.sleep(1)  # Short delay between tests for readability

# Function to initialize the kernel and perform the testing
def initialize_kernel():
    print("PY_OS Kernel Initializing...")
    time.sleep(1)
    
    # Testing all commands and apps before everything initializes
    test_commands_and_apps()
    
    # Print completion message
    print("\nInitialization Complete. Enter command (.pyoscmd):")

# Function to handle command input
def handle_command_input():
    while True:
        command = input("Enter command (.pyoscmd): ").strip()
        
        if command == 'exit':
            print("Shutting down PY_OS...")
            break
        elif command:
            run_command(command)
        else:
            print("No command entered. Please try again.")

# Start kernel
if __name__ == "__main__":
    initialize_kernel()
    handle_command_input()
