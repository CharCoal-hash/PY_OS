import os
import zipfile
import hashlib

def calculate_hash(file_path):
    """Calculate MD5 hash of a file."""
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

def update_system(upd_file, target_dir):
    """Update the system by replacing only modified or missing files."""
    if not os.path.exists(upd_file):
        print(f"[ERROR] .upd file not found: {upd_file}")
        return

    with zipfile.ZipFile(upd_file, "r") as zipf:
        # Extract and parse the manifest
        manifest = zipf.read("manifest.txt").decode().splitlines()

        for entry in manifest:
            rel_path, hash_in_upd = entry.split(",")
            target_path = os.path.join(target_dir, rel_path)

            # Check if the file needs updating
            if os.path.exists(target_path):
                hash_current = calculate_hash(target_path)
                if hash_current == hash_in_upd:
                    print(f"[SKIP] File up-to-date: {rel_path}")
                    continue
            
            # Replace the file
            print(f"[UPDATE] Replacing file: {rel_path}")
            os.makedirs(os.path.dirname(target_path), exist_ok=True)
            with open(target_path, "wb") as f_out:
                f_out.write(zipf.read(rel_path))

        print("\n[INFO] Update process completed.")

# Main script
if __name__ == "__main__":
    print("\nWelcome to the PY_OS Updater!")
    print("------------------------------------")
    upd_file = input("Enter the path to the .upd file: ").strip()
    target_dir = input("Enter the target directory for the update: ").strip()

    if not upd_file.endswith(".upd"):
        print("[ERROR] Invalid file type. Provide a .upd file.")
    elif not os.path.exists(target_dir) or not os.path.isdir(target_dir):
        print("[ERROR] Invalid target directory.")
    else:
        update_system(upd_file, target_dir)
