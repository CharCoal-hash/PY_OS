import os
import requests
import zipfile
import shutil
from urllib.parse import urljoin

# Define the repository URL where updates are stored
REPO_URL = "https://github.com/CharCoal-hash/PY_OS/"
UPDATE_FILE = "update.upd"
TEMP_DIR = "Z:/PY_OS/Temp"
UPDATE_DIR = "Z:/PY_OS/Updates"
LOG_FILE = os.path.join(TEMP_DIR, "logs", "update_log.txt")

# Function to log messages to the log file
def log(message):
    with open(LOG_FILE, "a") as log_file:
        log_file.write(message + "\n")

# Function to download the update file
def download_update_file():
    try:
        response = requests.get(urljoin(REPO_URL, UPDATE_FILE))
        response.raise_for_status()  # Raise an exception for bad responses
        with open(os.path.join(TEMP_DIR, UPDATE_FILE), "wb") as file:
            file.write(response.content)
        log("Successfully downloaded the update file.")
    except requests.exceptions.RequestException as e:
        log(f"Error downloading the update file: {e}")
        return False
    return True

# Function to check for updates based on version (optional)
def check_for_update():
    # This can be customized based on how version info is stored.
    # For example, check the version number in the update file.
    # For simplicity, this will skip version checks for now.
    return True

# Function to apply the update (download and replace files)
def apply_update():
    if not os.path.exists(UPDATE_DIR):
        os.makedirs(UPDATE_DIR)

    try:
        # Example: Assuming the update is a zip file containing new files
        update_zip_path = os.path.join(TEMP_DIR, UPDATE_FILE)
        with zipfile.ZipFile(update_zip_path, 'r') as zip_ref:
            zip_ref.extractall(UPDATE_DIR)
        log(f"Update files extracted to {UPDATE_DIR}.")
        
        # Replace old files with the new ones
        # Here we assume the update files overwrite the old files
        for file_name in os.listdir(UPDATE_DIR):
            source = os.path.join(UPDATE_DIR, file_name)
            destination = os.path.join("Z:/PY_OS", file_name)  # Adjust this path as needed
            if os.path.exists(destination):
                shutil.move(destination, destination + ".bak")  # Backup old files
            shutil.move(source, destination)
        log("Update applied successfully.")
    except Exception as e:
        log(f"Error applying the update: {e}")
        return False
    return True

# Function to run the update process
def update_system():
    log("Starting PY_OS update process...")

    # Download the update file from the GitHub repository
    if not download_update_file():
        return

    # Check if an update is available (optional, can be customized)
    if not check_for_update():
        log("No update available.")
        return

    # Apply the update
    if apply_update():
        log("PY_OS updated successfully!")
    else:
        log("Update failed.")

# Run the update process
if __name__ == "__main__":
    update_system()
